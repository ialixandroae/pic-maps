{"version":3,"sources":["store/store.js","helpers/helpers.js","components/upload/UploadPicture.js","components/credits/Credits.js","components/map/Map.js","components/main/Main.js","App.js","serviceWorker.js","index.js"],"names":["initialState","data","uploadedPicture","store","createContext","Provider","StateProvider","children","useReducer","state","action","type","Error","dispatch","value","rgbToHex","map","x","hex","toString","length","join","UploadPicture","useState","previewVisible","setPreviewVisible","previewImage","setPreviewImage","previewTitle","setPreviewTitle","fileList","setFileList","colors","setColors","getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","handlePreview","a","url","preview","originFileObj","name","substring","lastIndexOf","handleChange","prominent","amount","uploadButton","PlusOutlined","style","marginTop","listType","onPreview","onChange","customRequest","onSuccess","setTimeout","visible","title","footer","onCancel","alt","width","src","color","index","key","background","height","Credits","bordered","className","href","target","icon","faTwitter","size","faLinkedin","faGithub","WebMapView","globalState","useContext","mapRef","useRef","setView","vtLayer","setVtLayer","useEffect","loadModules","css","Map","MapView","Expand","VectorTileLayer","layer","portalItem","id","add","view","container","current","zoom","center","node","document","createElement","ReactDOM","render","expand","content","expanded","ui","creditsNode","credits","loadWebMap","currentStyleInfo","layers","forEach","styleLayer","styleLayerId","styleProperties","getPaintProperties","Math","floor","random","setPaintProperties","ref","Content","Layout","Header","Main","App","Boolean","window","location","hostname","match","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.55200a52.chunk.js","sourcesContent":["// store.js\nimport React, { createContext, useReducer } from 'react';\n\nconst initialState = {\n  data: [],\n  uploadedPicture: null,\n};\nconst store = createContext(initialState);\nconst { Provider } = store;\n\nconst StateProvider = ({ children }) => {\n  const [state, dispatch] = useReducer((state, action) => {\n    switch (action.type) {\n      case 'SET_DATA':\n        return { ...state, data: action.data };\n      case 'SET_UPLOADED_PICTURE':\n        return { ...state, uploadedPicture: action.data };\n      default:\n        throw new Error();\n    }\n  }, initialState);\n\n  return <Provider value={{ state, dispatch }}>{children}</Provider>;\n};\n\nexport { store, StateProvider };\n","const rgbToHex = ([r, g, b]) =>\n  '#' +\n  [r, g, b]\n    .map((x) => {\n      const hex = x.toString(16);\n      return hex.length === 1 ? '0' + hex : hex;\n    })\n    .join('');\n\nexport { rgbToHex };\n","import React, { useState } from 'react';\nimport { Upload, Modal, Image, Row } from 'antd';\nimport { prominent } from 'color.js';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { rgbToHex } from '../../helpers/helpers';\n\nconst UploadPicture = ({ dispatch }) => {\n  const [previewVisible, setPreviewVisible] = useState(false);\n  const [previewImage, setPreviewImage] = useState('');\n  const [previewTitle, setPreviewTitle] = useState('');\n  const [fileList, setFileList] = useState([]);\n  const [colors, setColors] = useState([]);\n\n  const getBase64 = (file) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = (error) => reject(error);\n    });\n  };\n\n  const handleCancel = () => setPreviewVisible(false);\n\n  const handlePreview = async (file) => {\n    if (!file.url && !file.preview) {\n      file.preview = await getBase64(file.originFileObj);\n    }\n    setPreviewImage(file.url || file.preview);\n    setPreviewVisible(true);\n    setPreviewTitle(\n      file.name || file.url.substring(file.url.lastIndexOf('/') + 1)\n    );\n  };\n\n  const handleChange = async ({ fileList }) => {\n    if (fileList?.length > 0) {\n      const file = fileList[0];\n      const preview = await getBase64(file.originFileObj);\n      const colors = await prominent(preview, { amount: 20 });\n      setFileList(fileList);\n      setColors(colors);\n      dispatch({ type: 'SET_DATA', data: colors });\n    } else {\n      setFileList([]);\n      setColors([]);\n    }\n  };\n\n  const dummyRequest = ({ file, onSuccess }) => {\n    setTimeout(() => {\n      onSuccess('ok');\n    }, 0);\n  };\n\n  const uploadButton = (\n    <div>\n      <PlusOutlined />\n      <div style={{ marginTop: 8 }}>Upload</div>\n    </div>\n  );\n\n  return (\n    <>\n      <Upload\n        listType=\"picture-card\"\n        fileList={fileList}\n        onPreview={handlePreview}\n        onChange={handleChange}\n        customRequest={dummyRequest}\n      >\n        {fileList.length >= 1 ? null : uploadButton}\n      </Upload>\n      <Modal\n        visible={previewVisible}\n        title={previewTitle}\n        footer={null}\n        onCancel={handleCancel}\n      >\n        <Image alt=\"example\" style={{ width: '100%' }} src={previewImage} />\n      </Modal>\n\n      {colors?.length > 0 &&\n        colors.map((color, index) => {\n          return (\n            <Row key={index}>\n              <div\n                key={index}\n                style={{\n                  background: rgbToHex(color),\n                  width: '100%',\n                  height: '50px',\n                }}\n              ></div>\n              <p>{rgbToHex(color)}</p>\n            </Row>\n          );\n        })}\n    </>\n  );\n};\n\nexport default UploadPicture;\n","import React from 'react';\nimport { Card, Row } from 'antd';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faTwitter,\n  faGithub,\n  faLinkedin,\n} from '@fortawesome/free-brands-svg-icons';\nimport './Credits.css';\n\nconst Credits = () => {\n  return (\n    <Card title=\"📸 PicMaps 🗺\" bordered={false} style={{ width: 200 }}>\n      <p></p>\n      <Row className=\"creditsRow\">\n        <a href=\"https://twitter.com/ialixandroae\" target=\"_blank\">\n          <FontAwesomeIcon icon={faTwitter} size=\"2x\" />\n          <span className=\"creditsText\">ialixandroae</span>\n        </a>\n      </Row>\n      <Row className=\"creditsRow\">\n        <a href=\"https://www.linkedin.com/in/ialixandroae/\" target=\"_blank\">\n          <FontAwesomeIcon icon={faLinkedin} size=\"2x\" />\n          <span className=\"creditsText\">ialixandroae</span>\n        </a>\n      </Row>\n      <Row className=\"creditsRow\">\n        <a href=\"https://github.com/ialixandroae/pic-maps\" target=\"_blank\">\n          <FontAwesomeIcon icon={faGithub} size=\"2x\" />\n          <span className=\"creditsText\">ialixandroae</span>\n        </a>\n      </Row>\n    </Card>\n  );\n};\n\nexport default Credits;\n","import React, { useEffect, useRef, useContext, useState } from 'react';\nimport { loadModules } from 'esri-loader';\nimport { store } from '../../store/store';\nimport UploadPicture from '../upload/UploadPicture';\nimport ReactDOM from 'react-dom';\nimport { rgbToHex } from '../../helpers/helpers';\nimport Credits from '../credits/Credits';\n\nexport const WebMapView = () => {\n  const globalState = useContext(store);\n  const { dispatch } = globalState;\n\n  const mapRef = useRef();\n  const [mapView, setView] = useState(null);\n  const [vtLayer, setVtLayer] = useState(null);\n\n  useEffect(() => {\n    // lazy load the required ArcGIS API for JavaScript modules and CSS\n    async function loadWebMap() {\n      const [Map, MapView, Expand, VectorTileLayer] = await loadModules(\n        [\n          'esri/Map',\n          'esri/views/MapView',\n          'esri/widgets/Expand',\n          'esri/layers/VectorTileLayer',\n        ],\n        {\n          css: true,\n        }\n      );\n\n      const layer = new VectorTileLayer({\n        // esri world vector tile service\n        portalItem: {\n          id: 'effe3475f05a4d608e66fd6eeb2113c0',\n        },\n      });\n      setVtLayer(layer);\n      const map = new Map();\n      map.add(layer);\n\n      const view = new MapView({\n        container: mapRef.current,\n        map: map,\n        zoom: 4,\n        center: [15, 45], // longitude, latitude\n      });\n\n      setView(view);\n\n      var node = document.createElement('div');\n      ReactDOM.render(<UploadPicture dispatch={dispatch} />, node);\n      let expand = new Expand({\n        view: view,\n        content: node,\n        expanded: true,\n      });\n      view.ui.add(expand, 'top-right');\n\n      var creditsNode = document.createElement('div');\n      ReactDOM.render(<Credits />, creditsNode);\n      let credits = new Expand({\n        view: view,\n        content: creditsNode,\n      });\n      view.ui.add(credits, 'top-left');\n\n      return () => {\n        if (view) {\n          // destroy the map view\n          view.container = null;\n        }\n      };\n    }\n    loadWebMap();\n  }, []);\n\n  useEffect(() => {\n    if (globalState?.state?.data?.length > 0) {\n      const styleLayers = vtLayer?.currentStyleInfo?.style?.layers;\n      styleLayers.forEach((styleLayer) => {\n        const styleLayerId = styleLayer?.id;\n        const styleProperties = vtLayer.getPaintProperties(styleLayerId);\n        styleProperties['fill-color'] = rgbToHex(\n          globalState.state.data[\n            Math.floor(Math.random() * globalState.state.data.length)\n          ]\n        );\n\n        vtLayer.setPaintProperties(styleLayerId, styleProperties);\n      });\n    }\n  }, [globalState.state.data]);\n\n  return <div style={{ height: '100%', width: '100%' }} ref={mapRef} />;\n};\n","import React, { useContext } from 'react';\nimport { Layout, Row, Col } from 'antd';\nimport { store } from '../../store/store';\nimport { WebMapView } from '../map/Map';\nimport './Main.css';\n\nconst { Header, Content } = Layout;\n\nfunction Main() {\n  const globalState = useContext(store);\n  const { dispatch } = globalState;\n  return (\n    <Layout>\n      <Content>\n        <Row>\n          <Col className=\"map-col\">\n            <WebMapView />\n          </Col>\n        </Row>\n      </Content>\n    </Layout>\n  );\n}\n\nexport default Main;\n","import React from \"react\";\nimport Main from \"./components/main/Main\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { StateProvider } from './store/store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}